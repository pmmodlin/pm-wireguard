#!/usr/bin/env bash

WG_INTERFACE={{ wireguard_interface }}
WG_PREFIX=/etc/wireguard
WG_CONF=$WG_PREFIX/$WG_INTERFACE.conf
WG_PARAMS=/etc/wireguard/params
WG_PEERS=/etc/wireguard/peers

WG_SUBNET={{ wireguard_subnet }}
WG_ADDR="$WG_SUBNET"1
WG_PORT={{ wireguard_port }}

CLIENT_DNSs={{ wireguard_subnet }}1

bye() {
    echo "$0: Error: $1" >&2
    exit $2
}

is_root() {
    if [ "${EUID}" -ne 0 ]; then
        bye "Запустите скрипт от пользователя в правами sudo" 1
    fi
}

is_exists_requirements() {
    which "$1" >/dev/null || bye "'$1' не найдено" 1
}

check_requirements() {
    is_exists_requirements "wg"
    is_exists_requirements "qrencode"
}

check_all() {
    is_root
    check_requirements
}

write_params() {
    echo "SERVER_PRIVATE_KEY=$SERVER_PRIVATE_KEY" >> "$WG_PARAMS"
    echo "SERVER_PUBLIC_KEY=$SERVER_PUBLIC_KEY" >> "$WG_PARAMS"
}

generate_server_keys() {
    SERVER_PRIVATE_KEY=$(wg genkey)
    SERVER_PUBLIC_KEY=$(echo "$SERVER_PRIVATE_KEY" | wg pubkey)
}

create_config_file() {
    echo "[Interface]" > $WG_CONF
    echo "PrivateKey = $SERVER_PRIVATE_KEY" >> $WG_CONF
    echo "Address = $WG_ADDR/24" >> $WG_CONF
    echo "ListenPort = $WG_PORT" >> $WG_CONF
    echo "PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o {{ ansible_default_ipv4.interface }} -j MASQUERADE" >> $WG_CONF
    echo "PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o {{ ansible_default_ipv4.interface }} -j MASQUERADE" >> $WG_CONF
}

enable_service() {
    systemctl enable wg-quick@$WG_INTERFACE.service
    systemctl start wg-quick@$WG_INTERFACE.service
    systemctl status wg-quick@$WG_INTERFACE.service
}

restart_service() {
    wg syncconf "$WG_INTERFACE" <(wg-quick strip "$WG_INTERFACE")
}

enable_ip_forwarwing() {
    test -z "$(grep "^net.ipv4.ip_forward=1" /etc/sysctl.conf)" && \
    echo -e "net.ipv4.ip_forward=1" >> /etc/sysctl.conf && sysctl -p && \
    echo -e "net.core.rmem_max=4194304\nnet.core.wmem_max=4194304" >> /etc/sysctl.conf && sysctl -p 
}

get_global_ipv4() {
    ip -4 addr | sed -ne 's|^.* inet \([^/]*\)/.* scope global.*$|\1|p' | awk '{print $1}' | head -1
}

is_exists_client_config() {
    test -e "$WG_PEERS/$1.conf" || bye "Пир '$(basename "$1")' не существует" 10
}

validate_client_name() {
    [[ "$1" =~ ^[a-zA-Z0-9_-]+$  ]] || bye "Неверное имя клиента '$1'" 11
}

add_client() {
    test -e "$WG_PEERS/$1.conf" && bye "Пир '$1' уже существует" 12
    validate_client_name "$1"
    client_private_key=$(wg genkey)
    client_public_key=$(echo "$client_private_key" | wg pubkey)
    client_psk=$(wg genpsk)
    most_recent_client_ip=$(grep -A 3 '\[Peer\]' $WG_CONF | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | awk -F '.' '{print $4}' | sort -nr | head -n 1)

    test "$most_recent_client_ip" -gt 253 && bye "Only 253 peers" 24 # 24 subnet

    # most recent client address + 1
    test -z "$most_recent_client_ip" && client_ip=$WG_SUBNET"2" || client_ip=$WG_SUBNET$(("$most_recent_client_ip" + 1))
    echo -e "\n# Client $1\n[Peer]\nPublicKey = $client_public_key\nPresharedKey = $client_psk\nAllowedIPs = $client_ip/32" >> $WG_CONF
    restart_service

    cat /opt/AdGuardHome/AdGuardHome.yaml | sed "s/^  persistent\:.*/  persistent\:\n    - safe_search:\n        enabled: false\n        bing: true\n        duckduckgo: true\n        google: true\n        pixabay: true\n        yandex: true\n        youtube: true\n      name: $1\n      tags: []\n      ids:\n        - $client_ip\n      blocked_services: []\n      upstreams: []\n      use_global_settings: true\n      filtering_enabled: false\n      parental_enabled: false\n      safebrowsing_enabled: false\n      use_global_blocked_services: true\n      ignore_querylog: false\n      ignore_statistics: false/g" | tee tmp.yaml
    cp tmp.yaml /opt/AdGuardHome/AdGuardHome.yaml
    systemctl restart AdGuardHome

    echo "[Interface]
PrivateKey = $client_private_key
Address = $client_ip/32
DNS = $CLIENT_DNSs

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
PresharedKey = $client_psk
Endpoint = $(get_global_ipv4):$WG_PORT
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 20" | tee $WG_PEERS/"$1".conf
}

delete_client() {
    is_exists_client_config "$1"
    rm "$WG_PEERS/$1.conf"
    sed -i "/^# Client $1\$/,/^$/d" "$WG_CONF"
    restart_service
    # /usr/bin/yq "del(.clients.persistent.[] | select(.name == \"$1\"))" /opt/AdGuardHome/AdGuardHome.yaml -P | tee tmp.yaml
    cat /opt/AdGuardHome/AdGuardHome.yaml | sed "s/name: $1/name: $1-renamed/g" | tee tmp.yaml
    cp tmp.yaml /opt/AdGuardHome/AdGuardHome.yaml
    systemctl restart AdGuardHome
}

get_client() {
    is_exists_client_config "$1"
    cat $WG_PEERS/"$1".conf
}

get_clients_names() {
    ls "$WG_PEERS" | awk -F "." '{print $1}'
}

get_client_qrcode_png() {
    is_exists_client_config "$1"
    qrencode -l L -o - -r $WG_PEERS/"$1".conf
}

show_client_qrcode() {
    is_exists_client_config "$1"
    qrencode -t ansiutf8 -l L -r $WG_PEERS/"$1".conf | less -R
}

cmd_add_client() {
    add_client "$1" >/dev/null
    show_client_qrcode "$1" | less -R
    echo "It also available in $WG_PEERS/$1.conf"
}

cmd_add_client_and_get_client_qrcode_png() {
    add_client "$1" >/dev/null
    get_client_qrcode_png "$1"
}

cmd_usage() {
    echo "Usage $0"
    echo -e "\tinit            - Инициализация wireguard"
    echo -e "\tadd <name>      - Создать клиента"
    echo -e "\tget <name>      - Показать QR-код клиента"
    echo -e "\trm <name>       - Удалить клиента"
    echo -e "\tls              - Список клиентов"
    echo -e "\tget_tg <name>   - Get client qrcode in bytes"
    echo -e "\tget_file <name> - Get client config file"
    echo -e "\tadd_tg <name>   - Add client and get qrcode in bytes"
}

cmd_init() {
    check_all
    mkdir -p $WG_PEERS
    chmod 600 -R $WG_PREFIX
    generate_server_keys
    write_params
    create_config_file
    enable_ip_forwarwing
    enable_service
    add_client "initial" >/dev/null
}

test -e && source $WG_PARAMS
case "$1" in
    usage) shift;              cmd_usage   "$@" ;;
    init) shift;               cmd_init    "$@" ;;
    add) shift;                cmd_add_client  "$@" ;;
    get) shift;                show_client_qrcode  "$@" ;;
    rm) shift;                 delete_client   "$@" ;;
    ls) shift;                 get_clients_names "$@" ;;
    get_tg) shift;             get_client_qrcode_png "$@" ;;
    get_file) shift;           get_client "$@" ;;
    add_tg) shift;             cmd_add_client_and_get_client_qrcode_png "$@" ;;
    "") shift;                 bye "Такой команды нет, изучите список возможных команд: '$0 usage'" 1 ;;
    *)                         bye "Команды '$1' не существует, изучите список возможных команд: '$0 usage'" 1 ;;
esac
exit 0